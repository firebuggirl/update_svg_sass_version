// Descriptive Base Colors

$red: #cc0a0a;
$grey: #525564;
$lightgrey: #74828F;
$lightblue: #87ceeb;
$lightergrey: #C0C0C0;
$grey-ultra-light: #edeff0;
$rust: #C25B56;
$offwhite: #FEF6EB;
$beige: #ECDDBE;
$tan: #EAAA7F;
$mustard: #FCAD0D;
$mustard2: #ba8058;
$grnblue: #2A4550;
$teal: #217C7E;
$teal-green:  #669999;
$lightteal: #496069;
$burgundy: #350514;
$rose: #7E272D;
$drkred: #710000;
$white          : #fff;
$ivory          : #F8FBF5;
$black          : #000;
$off-black      : #2D3339;
$river-bed      : #48525c;
$grey           : #878787;
$medium-dark-grey: #52595f;
$regent-st-blue : #add8e6;
$scooter        : #39add1;
$yellow-orange  : #ffa949;
$fountain-blue  : #52bab3;
$emerald        : #5ece7f;
$sunglo         : #e67478;
$coral          : #ff784f;
$purple-majesty : #9279c3;

// Functional color variables

$color-prim         : $yellow-orange;
$color-sec          : $river-bed;

$color-text-light   : $white;
$color-text-base    : $grey;
$color-text-dark    : $river-bed;

$color-border-light : lighten($grey, 35%);
$color-border-dark  : $yellow-orange;

$color-link-default : $yellow-orange;
$color-link-visited : $regent-st-blue;

$color-shadow       : rgba($black,.8);
$color-body         : $white;

// Color Palette Modifiers- nested map
/* To use these as color values in our style rules,
use map-get function.
Ex:
h1{
color: map-get(map-get($palettes, grey), x-dark);
}

But, too long so
create @function pallette in _functions.scss to do the work */
/*To call palette function in style rule:
  h1{
  color: palette(grey, x-dark);
} */
$palettes: (
  grey: (
    xx-light : lighten($grey, 43%),
    x-light  : lighten($grey, 35%),
    light    : lighten($grey, 12%),
    base     : $grey,
    dark     : darken($grey, 8%),
    x-dark   : darken($grey, 16%)
  ),
	black: (
		light    : lighten($black, 10%),
		base     : $black,
		dark     : darken($black, 10%)
	)
);


// UI Colors
/*Create a Sass map to give base colors a theme name..comes in handy later when
creating class names for ui elements like buttons, etc.. Then create an
each directive (in mixins partial) to dynamically create a class name for each key in our map below*/
/* Classes created:
.btn--default
.btn--success
.btn--error
.btn--warning
.btn--info
*/
$ui-colors: (
	default : $fountain-blue,
	success : $emerald,
	error   : $sunglo,
	warning : $coral,
	info    : $purple-majesty
);
